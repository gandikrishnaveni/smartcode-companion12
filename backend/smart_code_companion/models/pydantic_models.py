# from pydantic import BaseModel, Field
# from enum import Enum

# class SkillLevel(str, Enum):
#     """
#     Enumeration for the user's skill level to ensure valid inputs.
#     """
#     BEGINNER = "beginner"
#     INTERMEDIATE = "intermediate"
#     ADVANCED = "advanced"

# class CodeRequest(BaseModel):
#     """
#     Defines the shape of the incoming request for the /comment endpoint.
#     """
#     code: str = Field(..., min_length=10, description="The source code to be reviewed.")
#     level: SkillLevel = Field(..., description="The user's declared skill level.")

# class CommentResponse(BaseModel):
#     """
#     Defines the shape of the JSON response from the /comment endpoint.
#     """
#     comment: str = Field(..., description="The AI-generated feedback for the code.")

# class HealthResponse(BaseModel):
#     """
#     Defines the shape of the health check response.
#     """
#     status: str = Field("ok", description="Indicates the service is running.")
# File: smart_code_companion/core/models/pydantic_models.py
# Description: Defines all Pydantic models for API request/response validation.

from pydantic import BaseModel, Field
from typing import Literal

# --- Shared Models & Types ---

# Use Literal to create a specific type that only accepts these exact strings.
# FastAPI uses this for automatic validation and rich documentation.
SkillLevel = Literal["beginner", "intermediate", "advanced"]

class HealthResponse(BaseModel):
    """Standard health check response model."""
    status: str = Field(..., example="ok", description="Indicates the operational status of the service.")


# --- Comment Endpoint Models ---

class CodeRequest(BaseModel):
    """Model for the incoming code submission request for commenting."""
    code: str = Field(
        ...,
        min_length=1,
        example="def add(a, b):\n    return a + b",
        description="The source code to be reviewed."
    )
    level: SkillLevel = Field(
        ...,
        example="beginner",
        description="The user's declared skill level."
    )

class CommentResponse(BaseModel):
    """Model for the AI-generated code comment response."""
    comment: str = Field(
        ...,
        example="This is a clear and concise function. Good job!",
        description="The feedback generated by the AI."
    )


# --- Run Endpoint Models ---

class RunRequest(BaseModel):
    """Model for the incoming code submission request for execution."""
    code: str = Field(
        ...,
        min_length=1,
        example="print('Hello from the hackathon!')",
        description="The Python code to be executed."
    )

class RunResponse(BaseModel):
    """
    Model for the response after executing code.
    It captures everything that a command-line execution would produce.
    """
    stdout: str = Field(
        ...,
        example="Hello from the hackathon!\n",
        description="The standard output (e.g., from print statements) of the executed code."
    )
    stderr: str = Field(
        ...,
        example="",
        description="The standard error output of the executed code. Empty if no errors occurred."
    )
    exit_code: int = Field(
        ...,
        example=0,
        description="The exit code of the process. 0 typically means success."
    )

    