from pydantic import BaseModel, Field
from typing import Literal, Optional,List

# Define the allowed skill levels using Literal for strong typing
SkillLevel = Literal["beginner", "intermediate", "advanced"]

class HealthResponse(BaseModel):
    """
    Standard health check response model.
    """
    status: str = Field(..., example="ok", description="Indicates the operational status of the service.")

class CodeRequest(BaseModel):
    """
    Model for the incoming code submission request.
    """
    code: str = Field(..., example="def add(a, b):\n    return a + b", description="The source code to be reviewed.")
    level: SkillLevel = Field(..., example="beginner", description="The user's declared skill level.")

class CommentResponse(BaseModel):
    """
    Model for the AI-generated code comment response.
    """
    comment: str = Field(..., example="This is a clear and concise function. Good job!", description="The feedback generated by the AI.")

class DebugRequest(BaseModel):
    """
    Model for debugging requests.
    """
    code: str = Field(..., example="print(x)", description="Code snippet that may contain an error.")
    level: SkillLevel = Field(..., example="intermediate", description="The user's declared skill level.")

class DebugResponse(BaseModel):
    """
    Model for debugging responses.
    """
    error: Optional[str] = Field(None, example="NameError: name 'x' is not defined", description="The actual error encountered.")
    explanation: Optional[str] = Field(None, example="You tried to use 'x' before defining it.", description="Why the error happened.")
    suggestion: Optional[str] = Field(None, example="Define 'x' before using it.", description="How the user can fix the issue.")
    fixed_code: Optional[str] = Field(None, example="x = 5\nprint(x)", description="A corrected version of the code.")
class SpeechCommentRequest(BaseModel):
    audio_base64: str  
    
class FunctionComment(BaseModel):
    name: str
    comment: str
    level: str

class CommentResponse(BaseModel):
    comment: str
    functions: List[FunctionComment] = []
    voice_comment: str = ""  # optional for speech
class VoiceCommentRequest(BaseModel):
    audio_base64: str
    code: str
    level: str
